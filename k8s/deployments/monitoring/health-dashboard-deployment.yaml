apiVersion: apps/v1
kind: Deployment
metadata:
  name: health-dashboard
  namespace: ecommerce
  labels:
    app: health-dashboard
    tier: monitoring
    version: v1.0.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: health-dashboard
  template:
    metadata:
      labels:
        app: health-dashboard
        tier: monitoring
        version: v1.0.0
    spec:
      containers:
      - name: health-dashboard
        image: nginx:alpine
        ports:
        - containerPort: 80
          name: http
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: dashboard-content
          mountPath: /usr/share/nginx/html
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
      volumes:
      - name: dashboard-content
        configMap:
          name: health-dashboard-content
      - name: nginx-config
        configMap:
          name: health-dashboard-nginx

---
apiVersion: v1
kind: Service
metadata:
  name: health-dashboard
  namespace: ecommerce
  labels:
    app: health-dashboard
    tier: monitoring
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 80
    protocol: TCP
    name: http
  selector:
    app: health-dashboard

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: health-dashboard-nginx
  namespace: ecommerce
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;
        
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        location /api/ {
            proxy_pass http://health-dashboard-api:3000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        location /health {
            return 200 'OK';
            add_header Content-Type text/plain;
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: health-dashboard-content
  namespace: ecommerce
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="th">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>E-Commerce Health Dashboard</title>
        <style>
            * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }
            
            body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                padding: 20px;
            }
            
            .container {
                max-width: 1400px;
                margin: 0 auto;
                background: rgba(255, 255, 255, 0.95);
                border-radius: 20px;
                padding: 30px;
                box-shadow: 0 20px 40px rgba(0,0,0,0.1);
                backdrop-filter: blur(10px);
            }
            
            .header {
                text-align: center;
                margin-bottom: 40px;
                padding-bottom: 20px;
                border-bottom: 2px solid #e0e0e0;
            }
            
            .header h1 {
                color: #2c3e50;
                font-size: 2.5em;
                margin-bottom: 10px;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
            }
            
            .header .subtitle {
                color: #7f8c8d;
                font-size: 1.2em;
                margin-bottom: 20px;
            }
            
            .status-overview {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin-bottom: 40px;
            }
            
            .status-card {
                background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
                color: white;
                padding: 25px;
                border-radius: 15px;
                text-align: center;
                box-shadow: 0 10px 20px rgba(0,0,0,0.1);
                transition: transform 0.3s ease;
            }
            
            .status-card:hover {
                transform: translateY(-5px);
            }
            
            .status-card h3 {
                font-size: 2em;
                margin-bottom: 10px;
            }
            
            .status-card p {
                font-size: 1.1em;
                opacity: 0.9;
            }
            
            .services-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                gap: 25px;
                margin-bottom: 40px;
            }
            
            .service-category {
                background: white;
                border-radius: 15px;
                padding: 25px;
                box-shadow: 0 10px 25px rgba(0,0,0,0.08);
                border: 1px solid #e0e0e0;
            }
            
            .service-category h2 {
                color: #2c3e50;
                margin-bottom: 20px;
                padding-bottom: 10px;
                border-bottom: 2px solid #3498db;
                font-size: 1.4em;
            }
            
            .service-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 15px;
                margin: 10px 0;
                background: #f8f9fa;
                border-radius: 10px;
                border-left: 4px solid #ddd;
                transition: all 0.3s ease;
            }
            
            .service-item:hover {
                transform: translateX(5px);
                box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            }
            
            .service-item.online {
                border-left-color: #27ae60;
                background: linear-gradient(90deg, #d5f4e6 0%, #f8f9fa 100%);
            }
            
            .service-item.offline {
                border-left-color: #e74c3c;
                background: linear-gradient(90deg, #ffeaa7 0%, #f8f9fa 100%);
            }
            
            .service-item.warning {
                border-left-color: #f39c12;
                background: linear-gradient(90deg, #ffeaa7 0%, #f8f9fa 100%);
            }
            
            .service-info {
                flex: 1;
            }
            
            .service-name {
                font-weight: bold;
                color: #2c3e50;
                font-size: 1.1em;
                margin-bottom: 5px;
            }
            
            .service-details {
                color: #7f8c8d;
                font-size: 0.9em;
            }
            
            .service-status {
                display: flex;
                align-items: center;
                gap: 10px;
            }
            
            .status-indicator {
                width: 12px;
                height: 12px;
                border-radius: 50%;
                animation: pulse 2s infinite;
            }
            
            .status-indicator.online {
                background: #27ae60;
            }
            
            .status-indicator.offline {
                background: #e74c3c;
            }
            
            .status-indicator.warning {
                background: #f39c12;
            }
            
            .status-text {
                font-weight: bold;
                font-size: 0.9em;
            }
            
            .status-text.online {
                color: #27ae60;
            }
            
            .status-text.offline {
                color: #e74c3c;
            }
            
            .status-text.warning {
                color: #f39c12;
            }
            
            .refresh-button {
                position: fixed;
                bottom: 30px;
                right: 30px;
                background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
                color: white;
                border: none;
                padding: 15px 20px;
                border-radius: 50px;
                font-size: 1em;
                cursor: pointer;
                box-shadow: 0 10px 20px rgba(0,0,0,0.2);
                transition: all 0.3s ease;
            }
            
            .refresh-button:hover {
                transform: translateY(-3px);
                box-shadow: 0 15px 30px rgba(0,0,0,0.3);
            }
            
            .last-updated {
                text-align: center;
                color: #7f8c8d;
                margin-top: 30px;
                font-style: italic;
            }
            
            @keyframes pulse {
                0% {
                    box-shadow: 0 0 0 0 rgba(116, 185, 255, 0.7);
                }
                70% {
                    box-shadow: 0 0 0 10px rgba(116, 185, 255, 0);
                }
                100% {
                    box-shadow: 0 0 0 0 rgba(116, 185, 255, 0);
                }
            }
            
            .loading {
                text-align: center;
                padding: 20px;
                color: #7f8c8d;
            }
            
            .spinner {
                border: 4px solid #f3f3f3;
                border-top: 4px solid #3498db;
                border-radius: 50%;
                width: 40px;
                height: 40px;
                animation: spin 1s linear infinite;
                margin: 0 auto 20px;
            }
            
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            
            @media (max-width: 768px) {
                .container {
                    padding: 20px;
                    margin: 10px;
                }
                
                .services-grid {
                    grid-template-columns: 1fr;
                }
                
                .status-overview {
                    grid-template-columns: repeat(2, 1fr);
                }
                
                .header h1 {
                    font-size: 2em;
                }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>🏥 E-Commerce Health Dashboard</h1>
                <p class="subtitle">Real-time Service Monitoring & Health Check</p>
                <div id="loading" class="loading">
                    <div class="spinner"></div>
                    <p>กำลังตรวจสอบสถานะ services...</p>
                </div>
            </div>
            
            <div id="dashboard-content" style="display: none;">
                <div class="status-overview">
                    <div class="status-card">
                        <h3 id="total-services">0</h3>
                        <p>Total Services</p>
                    </div>
                    <div class="status-card" style="background: linear-gradient(135deg, #00b894 0%, #00a085 100%);">
                        <h3 id="online-services">0</h3>
                        <p>Online Services</p>
                    </div>
                    <div class="status-card" style="background: linear-gradient(135deg, #fdcb6e 0%, #e17055 100%);">
                        <h3 id="warning-services">0</h3>
                        <p>Warning Services</p>
                    </div>
                    <div class="status-card" style="background: linear-gradient(135deg, #fd79a8 0%, #e84393 100%);">
                        <h3 id="offline-services">0</h3>
                        <p>Offline Services</p>
                    </div>
                </div>
                
                <div class="services-grid">
                    <div class="service-category">
                        <h2>🌐 Frontend Applications</h2>
                        <div id="frontend-services"></div>
                    </div>
                    
                    <div class="service-category">
                        <h2>🔧 Backend Services</h2>
                        <div id="backend-services"></div>
                    </div>
                    
                    <div class="service-category">
                        <h2>🗄️ Infrastructure Services</h2>
                        <div id="infrastructure-services"></div>
                    </div>
                </div>
                
                <div class="last-updated">
                    <p>อัพเดทล่าสุด: <span id="last-updated-time"></span></p>
                </div>
            </div>
        </div>
        
        <button class="refresh-button" onclick="checkAllServices()">
            🔄 Refresh
        </button>
        
        <script>
            const services = {
                frontend: [
                    { name: 'Customer Platform', url: 'customer-platform:3000', port: '3000', description: 'หน้าเว็บลูกค้า' },
                    { name: 'Admin Dashboard', url: 'admin-dashboard:3100', port: '3100', description: 'หน้าจัดการระบบ' },
                    { name: 'Customer Platform Light', url: 'customer-platform-light', port: '80', description: 'หน้าเว็บลูกค้า (Light)' },
                    { name: 'Admin Dashboard Light', url: 'admin-dashboard-light', port: '80', description: 'หน้าจัดการระบบ (Light)' }
                ],
                backend: [
                    { name: 'API Gateway', url: 'api-gateway:8080', port: '8080', description: 'ประตูหลักของ API' },
                    { name: 'API Gateway Light', url: 'api-gateway-light', port: '80', description: 'ประตูหลักของ API (Light)' },
                    { name: 'Auth Service', url: 'auth-service:3001', port: '3001', description: 'ระบบยืนยันตัวตน' },
                    { name: 'User Service', url: 'user-service:3002', port: '3002', description: 'จัดการข้อมูลผู้ใช้' },
                    { name: 'Product Service', url: 'product-service:3003', port: '3003', description: 'จัดการสินค้า' },
                    { name: 'Order Service', url: 'order-service:3004', port: '3004', description: 'จัดการคำสั่งซื้อ' },
                    { name: 'Payment Service', url: 'payment-service:3005', port: '3005', description: 'ระบบชำระเงิน' },
                    { name: 'Cart Service', url: 'cart-service:3006', port: '3006', description: 'ตะกร้าสินค้า' },
                    { name: 'Inventory Service', url: 'inventory-service:3007', port: '3007', description: 'จัดการสต็อก' },
                    { name: 'Shipping Service', url: 'shipping-service:3008', port: '3008', description: 'ระบบจัดส่ง' },
                    { name: 'Promotion Service', url: 'promotion-service:3009', port: '3009', description: 'ระบบโปรโมชั่น' },
                    { name: 'Review Service', url: 'review-service:3010', port: '3010', description: 'ระบบรีวิว' },
                    { name: 'Notification Service', url: 'notification-service:3011', port: '3011', description: 'ระบบแจ้งเตือน' },
                    { name: 'Admin Service', url: 'admin-service:3012', port: '3012', description: 'ระบบจัดการ' }
                ],
                infrastructure: [
                    { name: 'Keycloak', url: 'keycloak:8080', port: '8080', description: 'ระบบจัดการผู้ใช้' },
                    { name: 'Vault', url: 'vault:8200', port: '8200', description: 'จัดการความลับ' },
                    { name: 'Kafka', url: 'kafka:9092', port: '9092', description: 'Message Queue' },
                    { name: 'Kafka UI', url: 'kafka-ui:8080', port: '8080', description: 'Kafka Management' }
                ]
            };
            
            let serviceStatuses = {};
            
            async function checkServiceHealth(service) {
                try {
                    // สำหรับ demo จะใช้ random status
                    // ในการใช้งานจริงจะเรียก API health check
                    const random = Math.random();
                    let status, responseTime;
                    
                    if (random > 0.8) {
                        status = 'offline';
                        responseTime = 0;
                    } else if (random > 0.7) {
                        status = 'warning';
                        responseTime = Math.floor(Math.random() * 2000) + 1000;
                    } else {
                        status = 'online';
                        responseTime = Math.floor(Math.random() * 500) + 50;
                    }
                    
                    return {
                        status: status,
                        responseTime: responseTime,
                        lastCheck: new Date().toISOString()
                    };
                } catch (error) {
                    return {
                        status: 'offline',
                        responseTime: 0,
                        lastCheck: new Date().toISOString(),
                        error: error.message
                    };
                }
            }
            
            function createServiceElement(service, status) {
                const statusClass = status.status;
                const statusText = {
                    'online': 'Online',
                    'offline': 'Offline',
                    'warning': 'Warning'
                };
                
                return `
                    <div class="service-item ${statusClass}">
                        <div class="service-info">
                            <div class="service-name">${service.name}</div>
                            <div class="service-details">
                                ${service.description} | Port: ${service.port}
                                ${status.responseTime > 0 ? ` | Response: ${status.responseTime}ms` : ''}
                            </div>
                        </div>
                        <div class="service-status">
                            <div class="status-indicator ${statusClass}"></div>
                            <span class="status-text ${statusClass}">${statusText[statusClass]}</span>
                        </div>
                    </div>
                `;
            }
            
            async function checkAllServices() {
                document.getElementById('loading').style.display = 'block';
                document.getElementById('dashboard-content').style.display = 'none';
                
                let totalServices = 0;
                let onlineServices = 0;
                let warningServices = 0;
                let offlineServices = 0;
                
                // Check all services
                for (const category in services) {
                    const categoryElement = document.getElementById(`${category}-services`);
                    categoryElement.innerHTML = '';
                    
                    for (const service of services[category]) {
                        totalServices++;
                        const status = await checkServiceHealth(service);
                        serviceStatuses[service.name] = status;
                        
                        if (status.status === 'online') onlineServices++;
                        else if (status.status === 'warning') warningServices++;
                        else offlineServices++;
                        
                        categoryElement.innerHTML += createServiceElement(service, status);
                    }
                }
                
                // Update overview
                document.getElementById('total-services').textContent = totalServices;
                document.getElementById('online-services').textContent = onlineServices;
                document.getElementById('warning-services').textContent = warningServices;
                document.getElementById('offline-services').textContent = offlineServices;
                
                // Update last updated time
                document.getElementById('last-updated-time').textContent = new Date().toLocaleString('th-TH');
                
                // Show dashboard
                document.getElementById('loading').style.display = 'none';
                document.getElementById('dashboard-content').style.display = 'block';
            }
            
            // Auto refresh every 30 seconds
            setInterval(checkAllServices, 30000);
            
            // Initial load
            checkAllServices();
        </script>
    </body>
    </html>
  
  style.css: |
    /* Additional styles can be added here if needed */
  
  script.js: |
    // Additional JavaScript functionality can be added here if needed
