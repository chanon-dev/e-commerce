apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: ecommerce
type: Opaque
data:
  # PostgreSQL Configuration
  POSTGRES_DB: ZWNvbW1lcmNl  # ecommerce
  POSTGRES_USER: cG9zdGdyZXM=  # postgres
  POSTGRES_PASSWORD: cGFzc3dvcmQ=  # password
  POSTGRES_REPLICATION_USER: cmVwbGljYXRvcg==  # replicator
  POSTGRES_REPLICATION_PASSWORD: cmVwbGljYXRvcjEyMw==  # replicator123
  
  # Connection URLs
  DATABASE_URL: cG9zdGdyZXNxbDovL3Bvc3RncmVzOnBhc3N3b3JkQHBvc3RncmVzLXNlcnZpY2U6NTQzMi9lY29tbWVyY2U=  # postgresql://postgres:password@postgres-service:5432/ecommerce
  KEYCLOAK_DATABASE_URL: cG9zdGdyZXNxbDovL2tleWNsb2FrOnBhc3N3b3JkQHBvc3RncmVzLXNlcnZpY2U6NTQzMi9rZXljbG9haw==  # postgresql://keycloak:password@postgres-service:5432/keycloak
---
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secrets
  namespace: ecommerce
type: Opaque
data:
  # MongoDB Configuration
  MONGO_INITDB_ROOT_USERNAME: bW9uZ29kYg==  # mongodb
  MONGO_INITDB_ROOT_PASSWORD: cGFzc3dvcmQ=  # password
  MONGO_INITDB_DATABASE: ZWNvbW1lcmNl  # ecommerce
  
  # Application User
  MONGODB_USERNAME: YXBwdXNlcg==  # appuser
  MONGODB_PASSWORD: YXBwcGFzcw==  # apppass
  MONGODB_DATABASE: ZWNvbW1lcmNl  # ecommerce
  
  # Connection URLs
  MONGODB_URI: bW9uZ29kYjovL2FwcHVzZXI6YXBwcGFzc0Btb25nb2RiLXNlcnZpY2U6MjcwMTcvZWNvbW1lcmNl  # mongodb://appuser:apppass@mongodb-service:27017/ecommerce
  MONGODB_URI_ADMIN: bW9uZ29kYjovL21vbmdvZGI6cGFzc3dvcmRAbW9uZ29kYi1zZXJ2aWNlOjI3MDE3L2FkbWlu  # mongodb://mongodb:password@mongodb-service:27017/admin
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secrets
  namespace: ecommerce
type: Opaque
data:
  # Redis Configuration
  REDIS_PASSWORD: cmVkaXNwYXNz  # redispass
  REDIS_USERNAME: ZGVmYXVsdA==  # default
  
  # Connection URLs
  REDIS_URL: cmVkaXM6Ly9kZWZhdWx0OnJlZGlzcGFzc0ByZWRpcy1zZXJ2aWNlOjYzNzk=  # redis://default:redispass@redis-service:6379
  REDIS_CACHE_URL: cmVkaXM6Ly9kZWZhdWx0OnJlZGlzcGFzc0ByZWRpcy1zZXJ2aWNlOjYzNzkvMA==  # redis://default:redispass@redis-service:6379/0
  REDIS_SESSION_URL: cmVkaXM6Ly9kZWZhdWx0OnJlZGlzcGFzc0ByZWRpcy1zZXJ2aWNlOjYzNzkvMQ==  # redis://default:redispass@redis-service:6379/1
---
apiVersion: v1
kind: Secret
metadata:
  name: elasticsearch-secrets
  namespace: ecommerce
type: Opaque
data:
  # Elasticsearch Configuration
  ELASTIC_USERNAME: ZWxhc3RpYw==  # elastic
  ELASTIC_PASSWORD: ZWxhc3RpY3Bhc3M=  # elasticpass
  
  # Connection URLs
  ELASTICSEARCH_URL: aHR0cDovL2VsYXN0aWM6ZWxhc3RpY3Bhc3NAZWxhc3RpY3NlYXJjaC1zZXJ2aWNlOjkyMDA=  # http://elastic:elasticpass@elasticsearch-service:9200
  ELASTICSEARCH_NODE: aHR0cDovL2VsYXN0aWNzZWFyY2gtc2VydmljZTo5MjAw  # http://elasticsearch-service:9200
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: database-init-scripts
  namespace: ecommerce
data:
  postgres-init.sql: |
    -- Create databases
    CREATE DATABASE ecommerce;
    CREATE DATABASE keycloak;
    
    -- Create users
    CREATE USER keycloak WITH PASSWORD 'password';
    CREATE USER appuser WITH PASSWORD 'apppass';
    
    -- Grant permissions
    GRANT ALL PRIVILEGES ON DATABASE ecommerce TO appuser;
    GRANT ALL PRIVILEGES ON DATABASE keycloak TO keycloak;
    
    -- Connect to ecommerce database
    \c ecommerce;
    
    -- Create schemas for different services
    CREATE SCHEMA IF NOT EXISTS auth;
    CREATE SCHEMA IF NOT EXISTS users;
    CREATE SCHEMA IF NOT EXISTS products;
    CREATE SCHEMA IF NOT EXISTS orders;
    CREATE SCHEMA IF NOT EXISTS payments;
    CREATE SCHEMA IF NOT EXISTS inventory;
    CREATE SCHEMA IF NOT EXISTS shipping;
    CREATE SCHEMA IF NOT EXISTS promotions;
    CREATE SCHEMA IF NOT EXISTS reviews;
    CREATE SCHEMA IF NOT EXISTS notifications;
    CREATE SCHEMA IF NOT EXISTS admin;
    
    -- Grant schema permissions
    GRANT ALL ON SCHEMA auth TO appuser;
    GRANT ALL ON SCHEMA users TO appuser;
    GRANT ALL ON SCHEMA products TO appuser;
    GRANT ALL ON SCHEMA orders TO appuser;
    GRANT ALL ON SCHEMA payments TO appuser;
    GRANT ALL ON SCHEMA inventory TO appuser;
    GRANT ALL ON SCHEMA shipping TO appuser;
    GRANT ALL ON SCHEMA promotions TO appuser;
    GRANT ALL ON SCHEMA reviews TO appuser;
    GRANT ALL ON SCHEMA notifications TO appuser;
    GRANT ALL ON SCHEMA admin TO appuser;
    
    -- Create extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    
    -- Create audit table
    CREATE TABLE IF NOT EXISTS audit_log (
      id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
      table_name VARCHAR(255) NOT NULL,
      operation VARCHAR(10) NOT NULL,
      old_data JSONB,
      new_data JSONB,
      user_id UUID,
      timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
  
  mongodb-init.js: |
    // Switch to ecommerce database
    db = db.getSiblingDB('ecommerce');
    
    // Create application user
    db.createUser({
      user: 'appuser',
      pwd: 'apppass',
      roles: [
        { role: 'readWrite', db: 'ecommerce' },
        { role: 'dbAdmin', db: 'ecommerce' }
      ]
    });
    
    // Create collections with validation
    db.createCollection('products', {
      validator: {
        $jsonSchema: {
          bsonType: 'object',
          required: ['name', 'price', 'category'],
          properties: {
            name: { bsonType: 'string' },
            price: { bsonType: 'number', minimum: 0 },
            category: { bsonType: 'string' },
            description: { bsonType: 'string' },
            images: { bsonType: 'array' },
            tags: { bsonType: 'array' },
            createdAt: { bsonType: 'date' },
            updatedAt: { bsonType: 'date' }
          }
        }
      }
    });
    
    db.createCollection('categories', {
      validator: {
        $jsonSchema: {
          bsonType: 'object',
          required: ['name', 'slug'],
          properties: {
            name: { bsonType: 'string' },
            slug: { bsonType: 'string' },
            description: { bsonType: 'string' },
            parentId: { bsonType: 'objectId' },
            createdAt: { bsonType: 'date' },
            updatedAt: { bsonType: 'date' }
          }
        }
      }
    });
    
    // Create indexes
    db.products.createIndex({ name: 'text', description: 'text', tags: 'text' });
    db.products.createIndex({ category: 1 });
    db.products.createIndex({ price: 1 });
    db.products.createIndex({ createdAt: -1 });
    
    db.categories.createIndex({ slug: 1 }, { unique: true });
    db.categories.createIndex({ parentId: 1 });
    
    // Insert sample data
    db.categories.insertMany([
      {
        name: 'Electronics',
        slug: 'electronics',
        description: 'Electronic devices and gadgets',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'Clothing',
        slug: 'clothing',
        description: 'Fashion and apparel',
        createdAt: new Date(),
        updatedAt: new Date()
      },
      {
        name: 'Books',
        slug: 'books',
        description: 'Books and literature',
        createdAt: new Date(),
        updatedAt: new Date()
      }
    ]);
  
  redis-init.sh: |
    #!/bin/bash
    
    # Wait for Redis to be ready
    until redis-cli ping; do
      echo "Waiting for Redis..."
      sleep 2
    done
    
    # Configure Redis
    redis-cli CONFIG SET requirepass redispass
    redis-cli AUTH redispass
    
    # Set up different databases
    redis-cli -a redispass SELECT 0  # Cache
    redis-cli -a redispass SELECT 1  # Sessions
    redis-cli -a redispass SELECT 2  # Rate limiting
    redis-cli -a redispass SELECT 3  # Pub/Sub
    
    # Configure memory policy
    redis-cli -a redispass CONFIG SET maxmemory-policy allkeys-lru
    redis-cli -a redispass CONFIG SET maxmemory 256mb
    
    # Enable keyspace notifications
    redis-cli -a redispass CONFIG SET notify-keyspace-events Ex
    
    echo "Redis configuration completed"
  
  elasticsearch-init.sh: |
    #!/bin/bash
    
    # Wait for Elasticsearch to be ready
    until curl -s http://localhost:9200/_cluster/health; do
      echo "Waiting for Elasticsearch..."
      sleep 5
    done
    
    # Create index templates
    curl -X PUT "localhost:9200/_index_template/ecommerce-logs" \
      -H 'Content-Type: application/json' \
      -d '{
        "index_patterns": ["ecommerce-logs-*"],
        "template": {
          "settings": {
            "number_of_shards": 1,
            "number_of_replicas": 0,
            "index.lifecycle.name": "ecommerce-logs-policy",
            "index.lifecycle.rollover_alias": "ecommerce-logs"
          },
          "mappings": {
            "properties": {
              "@timestamp": { "type": "date" },
              "level": { "type": "keyword" },
              "message": { "type": "text" },
              "service": { "type": "keyword" },
              "traceId": { "type": "keyword" },
              "spanId": { "type": "keyword" },
              "userId": { "type": "keyword" },
              "requestId": { "type": "keyword" }
            }
          }
        }
      }'
    
    # Create product search index
    curl -X PUT "localhost:9200/products" \
      -H 'Content-Type: application/json' \
      -d '{
        "settings": {
          "number_of_shards": 1,
          "number_of_replicas": 0,
          "analysis": {
            "analyzer": {
              "product_analyzer": {
                "type": "custom",
                "tokenizer": "standard",
                "filter": ["lowercase", "stop", "snowball"]
              }
            }
          }
        },
        "mappings": {
          "properties": {
            "id": { "type": "keyword" },
            "name": { 
              "type": "text",
              "analyzer": "product_analyzer",
              "fields": {
                "keyword": { "type": "keyword" }
              }
            },
            "description": { 
              "type": "text",
              "analyzer": "product_analyzer"
            },
            "category": { "type": "keyword" },
            "price": { "type": "double" },
            "tags": { "type": "keyword" },
            "rating": { "type": "double" },
            "reviewCount": { "type": "integer" },
            "inStock": { "type": "boolean" },
            "createdAt": { "type": "date" },
            "updatedAt": { "type": "date" }
          }
        }
      }'
    
    echo "Elasticsearch configuration completed"
