apiVersion: v1
kind: Secret
metadata:
  name: vault-secrets
  namespace: ecommerce
type: Opaque
data:
  # Vault Configuration
  VAULT_ADDR: aHR0cDovL3ZhdWx0LXNlcnZpY2U6ODIwMA==  # http://vault-service:8200
  VAULT_TOKEN: eW91ci12YXVsdC10b2tlbg==  # your-vault-token
  VAULT_ROLE_ID: eW91ci1yb2xlLWlk  # your-role-id
  VAULT_SECRET_ID: eW91ci1zZWNyZXQtaWQ=  # your-secret-id
  
  # Vault Unseal Keys (for development only)
  VAULT_UNSEAL_KEY_1: dW5zZWFsLWtleS0x  # unseal-key-1
  VAULT_UNSEAL_KEY_2: dW5zZWFsLWtleS0y  # unseal-key-2
  VAULT_UNSEAL_KEY_3: dW5zZWFsLWtleS0z  # unseal-key-3
  
  # Root Token (for development only)
  VAULT_ROOT_TOKEN: cm9vdC10b2tlbg==  # root-token
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-config
  namespace: ecommerce
data:
  vault.hcl: |
    ui = true
    
    listener "tcp" {
      address = "0.0.0.0:8200"
      tls_disable = 1
    }
    
    storage "file" {
      path = "/vault/data"
    }
    
    api_addr = "http://0.0.0.0:8200"
    cluster_addr = "http://0.0.0.0:8201"
    
    # Enable audit logging
    audit {
      file {
        file_path = "/vault/logs/audit.log"
      }
    }
    
    # Default lease settings
    default_lease_ttl = "168h"
    max_lease_ttl = "720h"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-policies
  namespace: ecommerce
data:
  app-policy.hcl: |
    # Policy for application services
    path "secret/data/ecommerce/*" {
      capabilities = ["read"]
    }
    
    path "database/creds/ecommerce-role" {
      capabilities = ["read"]
    }
    
    path "auth/token/lookup-self" {
      capabilities = ["read"]
    }
    
    path "auth/token/renew-self" {
      capabilities = ["update"]
    }
  
  admin-policy.hcl: |
    # Policy for admin operations
    path "secret/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }
    
    path "database/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }
    
    path "auth/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }
    
    path "sys/*" {
      capabilities = ["create", "read", "update", "delete", "list"]
    }
  
  readonly-policy.hcl: |
    # Policy for read-only access
    path "secret/data/ecommerce/*" {
      capabilities = ["read"]
    }
    
    path "auth/token/lookup-self" {
      capabilities = ["read"]
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: vault-init-scripts
  namespace: ecommerce
data:
  init-vault.sh: |
    #!/bin/bash
    set -e
    
    echo "Waiting for Vault to be ready..."
    until curl -s http://localhost:8200/v1/sys/health; do
      sleep 2
    done
    
    echo "Initializing Vault..."
    if ! vault status | grep -q "Initialized.*true"; then
      vault operator init -key-shares=3 -key-threshold=2 > /tmp/vault-keys.txt
      
      # Extract unseal keys and root token
      UNSEAL_KEY_1=$(grep 'Unseal Key 1:' /tmp/vault-keys.txt | awk '{print $NF}')
      UNSEAL_KEY_2=$(grep 'Unseal Key 2:' /tmp/vault-keys.txt | awk '{print $NF}')
      ROOT_TOKEN=$(grep 'Initial Root Token:' /tmp/vault-keys.txt | awk '{print $NF}')
      
      # Unseal Vault
      vault operator unseal $UNSEAL_KEY_1
      vault operator unseal $UNSEAL_KEY_2
      
      # Login with root token
      vault auth $ROOT_TOKEN
      
      echo "Vault initialized and unsealed successfully"
    else
      echo "Vault already initialized"
    fi
  
  setup-secrets.sh: |
    #!/bin/bash
    set -e
    
    echo "Setting up Vault secrets..."
    
    # Enable KV secrets engine
    vault secrets enable -path=secret kv-v2
    
    # Enable database secrets engine
    vault secrets enable database
    
    # Configure PostgreSQL database connection
    vault write database/config/postgresql \
      plugin_name=postgresql-database-plugin \
      connection_url="postgresql://{{username}}:{{password}}@postgres-service:5432/ecommerce?sslmode=disable" \
      allowed_roles="ecommerce-role" \
      username="postgres" \
      password="password"
    
    # Create database role
    vault write database/roles/ecommerce-role \
      db_name=postgresql \
      creation_statements="CREATE ROLE \"{{name}}\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; GRANT SELECT ON ALL TABLES IN SCHEMA public TO \"{{name}}\";" \
      default_ttl="1h" \
      max_ttl="24h"
    
    # Store application secrets
    vault kv put secret/ecommerce/database \
      postgres_host="postgres-service" \
      postgres_port="5432" \
      postgres_db="ecommerce" \
      mongodb_host="mongodb-service" \
      mongodb_port="27017" \
      redis_host="redis-service" \
      redis_port="6379"
    
    vault kv put secret/ecommerce/jwt \
      secret="your-jwt-secret-key-here" \
      refresh_secret="your-refresh-secret-key" \
      expiration="24h"
    
    vault kv put secret/ecommerce/payment \
      stripe_secret_key="sk_test_your_stripe_secret_key" \
      stripe_webhook_secret="whsec_your_webhook_secret" \
      paypal_client_id="your-paypal-client-id" \
      paypal_client_secret="your-paypal-client-secret"
    
    vault kv put secret/ecommerce/email \
      smtp_host="smtp.gmail.com" \
      smtp_port="587" \
      smtp_username="your-email@gmail.com" \
      smtp_password="your-smtp-password"
    
    vault kv put secret/ecommerce/aws \
      access_key_id="your-aws-access-key" \
      secret_access_key="your-aws-secret-key" \
      region="us-west-2" \
      s3_bucket="ecommerce-assets"
    
    echo "Vault secrets configured successfully"
  
  setup-auth.sh: |
    #!/bin/bash
    set -e
    
    echo "Setting up Vault authentication..."
    
    # Enable AppRole auth method
    vault auth enable approle
    
    # Create policies
    vault policy write app-policy /vault/policies/app-policy.hcl
    vault policy write admin-policy /vault/policies/admin-policy.hcl
    vault policy write readonly-policy /vault/policies/readonly-policy.hcl
    
    # Create AppRole for applications
    vault write auth/approle/role/ecommerce-app \
      token_policies="app-policy" \
      token_ttl=1h \
      token_max_ttl=4h \
      bind_secret_id=true
    
    # Create AppRole for admin
    vault write auth/approle/role/ecommerce-admin \
      token_policies="admin-policy" \
      token_ttl=8h \
      token_max_ttl=24h \
      bind_secret_id=true
    
    # Get role IDs
    APP_ROLE_ID=$(vault read -field=role_id auth/approle/role/ecommerce-app/role-id)
    ADMIN_ROLE_ID=$(vault read -field=role_id auth/approle/role/ecommerce-admin/role-id)
    
    # Generate secret IDs
    APP_SECRET_ID=$(vault write -field=secret_id auth/approle/role/ecommerce-app/secret-id)
    ADMIN_SECRET_ID=$(vault write -field=secret_id auth/approle/role/ecommerce-admin/secret-id)
    
    echo "App Role ID: $APP_ROLE_ID"
    echo "App Secret ID: $APP_SECRET_ID"
    echo "Admin Role ID: $ADMIN_ROLE_ID"
    echo "Admin Secret ID: $ADMIN_SECRET_ID"
    
    echo "Vault authentication configured successfully"
