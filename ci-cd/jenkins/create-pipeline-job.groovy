// üöÄ Jenkins Job DSL Script to Create E-commerce Pipeline
// This script automatically creates the pipeline job

import jenkins.model.*
import hudson.model.*
import org.jenkinsci.plugins.workflow.job.WorkflowJob
import org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition

// Get Jenkins instance
def jenkins = Jenkins.getInstance()

// Job configuration
def jobName = "E-commerce-Deployment-Pipeline"
def jobDescription = """
üöÄ E-commerce Microservices Deployment Pipeline

Features:
‚úÖ Multi-component deployment (Frontend, Backend, All)
‚úÖ Multi-environment support (Dev, Staging, Prod)
‚úÖ Parallel execution for faster builds
‚úÖ Comprehensive testing (Unit, Integration, E2E)
‚úÖ Security scanning and code quality checks
‚úÖ Docker image building and registry push
‚úÖ Kubernetes deployment with health checks
‚úÖ Rollback capabilities for production
‚úÖ Slack notifications for team updates
"""

// Pipeline script content
def pipelineScript = '''
pipeline {
    agent any
    
    environment {
        // Docker Registry
        DOCKER_REGISTRY = 'your-registry.com'
        DOCKER_CREDENTIALS = 'docker-registry-credentials'
        
        // Kubernetes
        KUBECONFIG_CREDENTIALS = 'kubeconfig-credentials'
        NAMESPACE_DEV = 'ecommerce-dev'
        NAMESPACE_STAGING = 'ecommerce-staging'
        NAMESPACE_PROD = 'ecommerce-prod'
        
        // Git
        GIT_CREDENTIALS = 'git-credentials'
        
        // Notification
        SLACK_CHANNEL = '#deployments'
        SLACK_CREDENTIALS = 'slack-webhook'
        
        // Build Info
        BUILD_VERSION = "${env.BUILD_NUMBER}-${env.GIT_COMMIT.take(7)}"
        BUILD_TIMESTAMP = new Date().format('yyyy-MM-dd-HH-mm-ss')
    }
    
    parameters {
        choice(
            name: 'DEPLOYMENT_TARGET',
            choices: ['dev', 'staging', 'prod'],
            description: 'Select deployment environment'
        )
        choice(
            name: 'COMPONENT',
            choices: ['all', 'frontend', 'backend', 'microservices'],
            description: 'Select component to deploy'
        )
        booleanParam(
            name: 'SKIP_TESTS',
            defaultValue: false,
            description: 'Skip running tests'
        )
        booleanParam(
            name: 'FORCE_DEPLOY',
            defaultValue: false,
            description: 'Force deployment even if tests fail'
        )
    }
    
    stages {
        stage('üöÄ Pipeline Start') {
            steps {
                script {
                    echo "üéØ Starting E-commerce Deployment Pipeline"
                    echo "üì¶ Component: ${params.COMPONENT}"
                    echo "üåç Environment: ${params.DEPLOYMENT_TARGET}"
                    echo "üè∑Ô∏è Version: ${BUILD_VERSION}"
                    
                    // Send start notification
                    sendSlackNotification("üöÄ Deployment Started", "good")
                }
            }
        }
        
        stage('üì• Checkout Code') {
            steps {
                script {
                    echo "üì• Checking out source code..."
                    checkout scm
                    
                    // Get commit info
                    env.GIT_COMMIT_MSG = sh(
                        script: 'git log -1 --pretty=%B',
                        returnStdout: true
                    ).trim()
                    
                    echo "üìù Commit: ${env.GIT_COMMIT_MSG}"
                }
            }
        }
        
        stage('üß™ Run Tests') {
            when {
                not { params.SKIP_TESTS }
            }
            parallel {
                stage('üé® Frontend Tests') {
                    when {
                        expression { params.COMPONENT in ['all', 'frontend'] }
                    }
                    steps {
                        script {
                            echo "üé® Running frontend tests..."
                            
                            // Customer Platform Tests
                            dir('frontend/customer-platform') {
                                sh '''
                                    echo "Testing Customer Platform..."
                                    # npm ci
                                    # npm run test:ci
                                    # npm run build
                                '''
                            }
                            
                            // Admin Dashboard Tests
                            dir('frontend/admin-dashboard') {
                                sh '''
                                    echo "Testing Admin Dashboard..."
                                    # npm ci
                                    # npm run test:ci
                                    # npm run build
                                '''
                            }
                        }
                    }
                }
                
                stage('‚öôÔ∏è Backend Tests') {
                    when {
                        expression { params.COMPONENT in ['all', 'backend', 'microservices'] }
                    }
                    steps {
                        script {
                            echo "‚öôÔ∏è Running backend tests..."
                            
                            // Test microservices
                            def services = [
                                'auth-service', 'user-service', 'product-service',
                                'order-service', 'payment-service', 'cart-service'
                            ]
                            
                            services.each { service ->
                                echo "Testing ${service}..."
                                // Add actual test commands here
                            }
                        }
                    }
                }
            }
        }
        
        stage('üê≥ Build Docker Images') {
            parallel {
                stage('üé® Build Frontend Images') {
                    when {
                        expression { params.COMPONENT in ['all', 'frontend'] }
                    }
                    steps {
                        script {
                            echo "üé® Building frontend Docker images..."
                            
                            // Customer Platform
                            echo "Building Customer Platform image..."
                            // sh "docker build -t ${DOCKER_REGISTRY}/customer-platform:${BUILD_VERSION} frontend/customer-platform/"
                            
                            // Admin Dashboard
                            echo "Building Admin Dashboard image..."
                            // sh "docker build -t ${DOCKER_REGISTRY}/admin-dashboard:${BUILD_VERSION} frontend/admin-dashboard/"
                        }
                    }
                }
                
                stage('‚öôÔ∏è Build Backend Images') {
                    when {
                        expression { params.COMPONENT in ['all', 'backend', 'microservices'] }
                    }
                    steps {
                        script {
                            echo "‚öôÔ∏è Building backend Docker images..."
                            
                            def services = [
                                'auth-service', 'user-service', 'product-service',
                                'order-service', 'payment-service', 'cart-service'
                            ]
                            
                            services.each { service ->
                                echo "Building ${service} image..."
                                // sh "docker build -t ${DOCKER_REGISTRY}/${service}:${BUILD_VERSION} backend/${service}/"
                            }
                        }
                    }
                }
            }
        }
        
        stage('üöÄ Deploy to Kubernetes') {
            steps {
                script {
                    echo "üöÄ Deploying to Kubernetes..."
                    
                    def namespace = ""
                    switch(params.DEPLOYMENT_TARGET) {
                        case 'dev':
                            namespace = NAMESPACE_DEV
                            break
                        case 'staging':
                            namespace = NAMESPACE_STAGING
                            break
                        case 'prod':
                            namespace = NAMESPACE_PROD
                            break
                    }
                    
                    echo "Deploying to namespace: ${namespace}"
                    echo "Component: ${params.COMPONENT}"
                    
                    // Add actual deployment commands here
                    // kubectl apply -f k8s/ -n ${namespace}
                }
            }
        }
        
        stage('üîç Health Checks') {
            steps {
                script {
                    echo "üîç Running health checks..."
                    
                    // Add health check commands
                    sh '''
                        echo "Checking application health..."
                        # Add actual health check commands
                    '''
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üßπ Cleaning up..."
                
                // Clean up Docker images
                sh '''
                    echo "Cleaning up Docker images..."
                    # docker system prune -f
                '''
            }
        }
        
        success {
            script {
                echo "‚úÖ Deployment successful!"
                sendSlackNotification("‚úÖ Deployment Successful", "good")
            }
        }
        
        failure {
            script {
                echo "‚ùå Deployment failed!"
                sendSlackNotification("‚ùå Deployment Failed", "danger")
            }
        }
    }
}

// Helper function for Slack notifications
def sendSlackNotification(String message, String color) {
    echo "üì¢ Notification: ${message}"
    // Add actual Slack notification code here
}
'''

// Create or update the job
def job = jenkins.getItem(jobName)
if (job != null) {
    println "Job '${jobName}' already exists. Updating..."
    job.delete()
}

// Create new pipeline job
job = jenkins.createProject(WorkflowJob, jobName)
job.setDescription(jobDescription)

// Set pipeline script
job.setDefinition(new CpsFlowDefinition(pipelineScript, true))

// Configure job properties
def parameterDefinitions = [
    new hudson.model.ChoiceParameterDefinition(
        'DEPLOYMENT_TARGET',
        ['dev', 'staging', 'prod'] as String[],
        'Select deployment environment'
    ),
    new hudson.model.ChoiceParameterDefinition(
        'COMPONENT', 
        ['all', 'frontend', 'backend', 'microservices'] as String[],
        'Select component to deploy'
    ),
    new hudson.model.BooleanParameterDefinition(
        'SKIP_TESTS',
        false,
        'Skip running tests'
    ),
    new hudson.model.BooleanParameterDefinition(
        'FORCE_DEPLOY',
        false,
        'Force deployment even if tests fail'
    )
]

def parametersProperty = new hudson.model.ParametersDefinitionProperty(parameterDefinitions)
job.addProperty(parametersProperty)

// Save the job
job.save()

println "‚úÖ Pipeline job '${jobName}' created successfully!"
println "üîó Job URL: ${jenkins.getRootUrl()}job/${jobName}/"
println "üöÄ Ready to build with parameters!"

// Trigger a test build
println "üß™ Triggering test build..."
def build = job.scheduleBuild2(0, new hudson.model.Cause.UserIdCause())
if (build != null) {
    println "‚úÖ Test build scheduled successfully!"
} else {
    println "‚ö†Ô∏è Could not schedule test build"
}
